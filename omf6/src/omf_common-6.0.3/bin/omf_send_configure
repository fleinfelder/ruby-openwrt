#!/usr/bin/env ruby
BIN_DIR = File.dirname(File.symlink?(__FILE__) ? File.readlink(__FILE__) : __FILE__)
TOP_DIR = File.join(BIN_DIR, '..')
$: << File.join(TOP_DIR, 'lib')

DESCR = %{
Send a configure message to a specific resource (topic) and print out any replies.

Any additional command line arguments are interpreted as property:value and are
sent with the create message.
}

require 'omf_common'

OP_MODE = :development
$debug = false
$timeout = 10


opts = {
  communication: {
    #url: 'xmpp://srv.mytestbed.net'
  },
  eventloop: { type: :em},
  logging: {
    level: 'info'
  }
}

resource_url = nil
resource_properties = {}

op = OptionParser.new
op.banner = "Usage: #{op.program_name} [options] property1:value1 property2:value2 ...\n#{DESCR}\n"
op.on '-r', '--resource-url URL', "URL of resource (e.g. xmpp://my.server.com/topic1)" do |url|
  resource_url = url
end
op.on '-y', '--yaml YAML_FILE', "Read type and property from YAML file" do |yfile|
  require 'yaml'
  y = YAML.load_file(yfile)
  unless o = y['configure']
    puts "Expected top level 'configure', but found '#{y.keys.inspect}'"
    abort
  end
  resource_properties = o['properties']
end
op.on '-d', '--debug', "Set log level to DEBUG" do
  opts[:logging][:level] = 'debug'
  $debug = true
end
op.on_tail('-h', "--help", "Show this message") { $stderr.puts op; exit }
rest = op.parse(ARGV) || []

unless resource_url || resource_type
  $stderr.puts 'Missing --resource-url --type or'
  $stderr.puts op
  exit(-1)
end

r = resource_url.split('/')
resource = r.pop
opts[:communication][:url] = r.join('/')

key = nil
def err_exit
  $stderr.puts("Options need to be of the 'key: value' type")
  exit(-1)
end
rest.each do |s|
  sa = s.split(':')
  if sa.length == 2
    err_exit if key
    resource_properties[sa[0]] = sa[1]
  else
    if s.end_with?(':')
      err_exit if key
      key = s[0]
    else
      err_exit unless key
      resource_properties[key] = s[0]
      key = nil
    end
  end
end
err_exit if key

def print_prop(name, value, level = 0)
  print "  #{'  ' * level}#{name}:"
  if value.is_a? Hash
    puts ''
    value.each {|k, v| print_prop(k, v, level + 1)}
  else
    puts " #{value}"
  end
end

OmfCommon.init(OP_MODE, opts) do |el|
  OmfCommon.comm.on_connected do |comm|
    comm.subscribe(resource) do |topic|
      topic.configure(resource_properties) do |msg|
        if (src_topic = (msg.src.is_a?(OmfCommon::Comm::Topic) ? msg.src.id : msg.src)) == topic.id
          puts "#{topic.id}"
        else
          puts "#{src_topic} via #{topic.id}"
        end
        msg.each_property do |name, value|
          print_prop(name, value)
        end
        puts "-----------------"
      end
      el.after($timeout) { el.stop } if $timeout > 0
    end
  end
end
